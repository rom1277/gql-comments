package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"errors"
	"fmt"
	"gql-comments/storage"
	"math/rand"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string, allowComments bool) (*storage.Post, error) {
	if title == "" || content == "" {
		return nil, errors.New("title and content must not be empty")
	}

	id := fmt.Sprintf("post-%d", rand.Intn(1000000))
	post := storage.Post{
		ID:            id,
		Title:         title,
		Content:       content,
		AllowComments: allowComments,
	}

	r.Storage.CreatePost(post)
	return &post, nil
}

// Posts is the resolver for the posts field.
// func (r *queryResolver) Posts(ctx context.Context) ([]*storage.Post, error) {
// 	posts := r.Storage.GetAllPosts()
// 	var result []*storage.Post
// 	for i := range posts {
// 		result = append(result, &posts[i])
// 	}
// 	return result, nil
// }

// Mutation returns MutationResolver implementation.
// func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
// func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
